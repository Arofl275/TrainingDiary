JAVAC := javac
JAVA := java
MKDIR := mkdir
BUILDPATH := build
LIBPATH := lib
SOURCEPATH := ap.util.property/src
CLASSPATH := ${BUILDPATH}

define class_java =
${1}: ${2} $(dir ${1})
endef

JARFILE := ap.util.property.jar
JARFILEWITHPATH := ${LIBPATH}/${JARFILE}

all: ${JARFILEWITHPATH}
.PHONY: all clean cleanall

DESERIALIZERJAR := ${LIBPATH}/ap.json.deserializer.jar
SERIALIZERJAR := ${LIBPATH}/ap.json.serializer.jar

JARS := \
$(wildcard ${LIBPATH}/common-io*.jar) \
$(wildcard ${LIBPATH}/fastjson*.jar) \
${DESERIALIZERJAR} \
${SERIALIZERJAR}

SRC_JAVA := \
$(wildcard ${SOURCEPATH}/ap/util/property/*.java)

BUILD_CLASSES := $(patsubst ${SOURCEPATH}%.java,${BUILDPATH}%.class,${SRC_JAVA})

DIRS := $(sort $(dir ${BUILD_CLASSES}))

$(foreach class,${BUILD_CLASSES},$(eval $(call class_java,${class},$(patsubst ${BUILDPATH}%.class,${SOURCEPATH}%.java,${class}))))

${DESERIALIZERJAR}:
	make -f makefile.ap.json.deserializer

${SERIALIZERJAR}:
	make -f makefile.ap.json.serializer

${DIRS}:
	${MKDIR} -p $@

${LIBPATH}:
	${MKDIR} -p $@

${BUILD_CLASSES}: clean ${DESERIALIZERJAR} ${SERIALIZERJAR} ${DIRS}
	${JAVAC} -Xlint:deprecation -Xlint:unchecked -d ${BUILDPATH} -cp "${CLASSPATH}:$(subst $() $(),:,${JARS})" -sourcepath ${SOURCEPATH} $(patsubst ${BUILDPATH}%.class,${SOURCEPATH}%.java,$@)

clean:
	rm -fr ${BUILDPATH}

cleanall: clean
	rm -f ${JARFILEWITHPATH}

${JARFILEWITHPATH}: ${LIBPATH} ${BUILD_CLASSES}
	jar cf ${JARFILE} -C ${BUILDPATH} .
	mv ${JARFILE} ${LIBPATH}
